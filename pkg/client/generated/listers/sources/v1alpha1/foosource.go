/*
Copyright (c) 2020 TriggerMesh, Inc

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/triggermesh/knative-sources/pkg/apis/sources/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FooSourceLister helps list FooSources.
type FooSourceLister interface {
	// List lists all FooSources in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.FooSource, err error)
	// FooSources returns an object that can list and get FooSources.
	FooSources(namespace string) FooSourceNamespaceLister
	FooSourceListerExpansion
}

// fooSourceLister implements the FooSourceLister interface.
type fooSourceLister struct {
	indexer cache.Indexer
}

// NewFooSourceLister returns a new FooSourceLister.
func NewFooSourceLister(indexer cache.Indexer) FooSourceLister {
	return &fooSourceLister{indexer: indexer}
}

// List lists all FooSources in the indexer.
func (s *fooSourceLister) List(selector labels.Selector) (ret []*v1alpha1.FooSource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FooSource))
	})
	return ret, err
}

// FooSources returns an object that can list and get FooSources.
func (s *fooSourceLister) FooSources(namespace string) FooSourceNamespaceLister {
	return fooSourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FooSourceNamespaceLister helps list and get FooSources.
type FooSourceNamespaceLister interface {
	// List lists all FooSources in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.FooSource, err error)
	// Get retrieves the FooSource from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.FooSource, error)
	FooSourceNamespaceListerExpansion
}

// fooSourceNamespaceLister implements the FooSourceNamespaceLister
// interface.
type fooSourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FooSources in the indexer for a given namespace.
func (s fooSourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FooSource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FooSource))
	})
	return ret, err
}

// Get retrieves the FooSource from the indexer for a given namespace and name.
func (s fooSourceNamespaceLister) Get(name string) (*v1alpha1.FooSource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("foosource"), name)
	}
	return obj.(*v1alpha1.FooSource), nil
}
