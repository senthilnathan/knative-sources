.PHONY: help mod-download build install release test coverage lint vet fmt fmt-test image clean

all: build

$(COMMANDS):
	$(GO) build -ldflags "$(LDFLAGS)" -o $(BIN_OUTPUT_DIR)/$(KSOURCE)-$@ -installsuffix cgo ./cmd/$@

help: ## Display this help
	@awk 'BEGIN {FS = ":.*?## "; printf "\n$(KSOURCE_DESC)\nUsage:\n  make \033[36m<source>\033[0m\n"} /^[a-zA-Z0-9._-]+:.*?## / {printf "  \033[36m%-20s\033[0m %s\n", $$1, $$2}' $(MAKEFILE_LIST)

mod-download: ## Download go modules
	$(GO) mod download

build: $(COMMANDS) ## Build the binary

release: ## Build release binaries
	@set -e ; \
	for bin in $(COMMANDS) ; do \
		for platform in $(SOURCES); do \
			GOOS=$${platform%/*} ; \
			GOARCH=$${platform#*/} ; \
			RELEASE_BINARY=$(KSOURCE)-$$bin-$${GOOS}-$${GOARCH} ; \
			[ $${GOOS} = "windows" ] && RELEASE_BINARY=$${RELEASE_BINARY}.exe ; \
			echo "GOOS=$${GOOS} GOARCH=$${GOARCH} $(GO) build -ldflags "$(LDFLAGS)" -o $(DIST_DIR)/$${RELEASE_BINARY} -installsuffix cgo" ./cmd/$$bin ; \
			GOOS=$${GOOS} GOARCH=$${GOARCH} $(GO) build -ldflags "$(LDFLAGS)" -o $(DIST_DIR)/$${RELEASE_BINARY} -installsuffix cgo ./cmd/$$bin ; \
		done ; \
	done

test: ## Run unit tests
ifndef HAS_GOTESTSUM
	$(error gotestsum not found. Please install it by executing 'make install-gotestsum' from the project root)
endif
	@mkdir -p $(TEST_OUTPUT_DIR)
	$(GOTEST) -cover -coverprofile=$(TEST_OUTPUT_DIR)/$(KSOURCE)-c.out $(GOPKGS)

cover: test ## Generate code coverage
	@mkdir -p $(COVER_OUTPUT_DIR)
	$(GOTOOL) cover -html=$(TEST_OUTPUT_DIR)/$(KSOURCE)-c.out -o $(COVER_OUTPUT_DIR)/$(KSOURCE)-coverage.html

lint: ## Lint source files
ifndef HAS_GOLANGCI_LINT
	$(error golangci-lint not found. Please install it by executing 'make install-golangci-lint' from the project root)
endif
	$(GOLINT) $(GOPKGS)

vet: ## Vet source files
	$(GO) vet $(GOPKGS)

fmt: ## Format source files
	$(GOFMT) -s -w $(shell $(GO) list -f '{{$$d := .Dir}}{{range .GoFiles}}{{$$d}}/{{.}} {{end}} {{$$d := .Dir}}{{range .TestGoFiles}}{{$$d}}/{{.}} {{end}}' $(GOPKGS))

fmt-test: ## Check source formatting
	@test -z $(shell $(GOFMT) -l $(shell $(GO) list -f '{{$$d := .Dir}}{{range .GoFiles}}{{$$d}}/{{.}} {{end}} {{$$d := .Dir}}{{range .TestGoFiles}}{{$$d}}/{{.}} {{end}}' $(GOPKGS)))

image: ## Builds the container image
	@for bin in $(COMMANDS) ; do \
		$(DOCKER) build -t $(IMAGE_NAME)-$$bin -f ./cmd/$$bin/Dockerfile ../ ; \
	done

cloudbuild-test: ## Test container image build with Google Cloud Build
	if [ -f cloudbuild.yaml ]; then \
		gcloud builds submit $(BASE_DIR) --config cloudbuild.yaml --substitutions COMMIT_SHA=${IMAGE_SHA},_KANIKO_IMAGE_TAG=_ ; \
	fi

cloudbuild: ## Build and publish image to GCR
	if [ -f cloudbuild.yaml ]; then \
		gcloud builds submit $(BASE_DIR) --config cloudbuild.yaml --substitutions COMMIT_SHA=${IMAGE_SHA},_KANIKO_IMAGE_TAG=${IMAGE_TAG} ; \
	fi

clean: ## Clean build artifacts
	@for bin in $(COMMANDS) ; do \
		for platform in $(SOURCES); do \
			GOOS=$${platform%/*} ; \
			GOARCH=$${platform#*/} ; \
			RELEASE_BINARY=$(KSOURCE)-$$bin-$${GOOS}-$${GOARCH} ; \
			[ $${GOOS} = "windows" ] && RELEASE_BINARY=$${RELEASE_BINARY}.exe ; \
			$(RM) -v $(DIST_DIR)/$${RELEASE_BINARY}; \
		done ; \
		$(RM) -v $(BIN_OUTPUT_DIR)/$(KSOURCE)-$$bin; \
	done
	@$(RM) -v $(TEST_OUTPUT_DIR)/$(KSOURCE)-c.out $(TEST_OUTPUT_DIR)/$(KSOURCE)-unit-tests.xml
	@$(RM) -v $(COVER_OUTPUT_DIR)/$(KSOURCE)-coverage.html

# Code generation
include $(BASE_DIR)/scripts/inc.Codegen